package pattern

/*
	–î–∞–Ω–Ω—ã–π –ø–∞—Ç–µ—Ä–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å.
*/

import "fmt"


type Transport interface {
    Drive()
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
type Car struct{}

func (c Car) Drive() {
    fmt.Println("Driving a car üöó")
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–º–æ–ª–µ—Ç–∞
type Plane struct{}

func (p Plane) Drive() {
    fmt.Println("Flying a plane ‚úàÔ∏è")
}

// –§–∞–±—Ä–∏–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
type TransportFactory interface {
    CreateTransport() Transport
}

type CarFactory struct{}

func (cf CarFactory) CreateTransport() Transport {
    return Car{}
}

// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–æ–ª–µ—Ç–æ–≤
type PlaneFactory struct{}

func (pf PlaneFactory) CreateTransport() Transport {
    return Plane{}
}

func main() {
    carFactory := CarFactory{}
    car := carFactory.CreateTransport()
    car.Drive()

    planeFactory := PlaneFactory{}
    plane := planeFactory.CreateTransport()
    plane.Drive()
}
